package proyecto2_201700893;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import java.awt.Image;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Random;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import static proyecto2_201700893.Inicio.*;

/**
 *
 * @author USER
 */
public class Usuario extends javax.swing.JFrame {

    NodoEquipo equipoActual = eq.primero;
    String body1[][];
    String body2[][];
    String body3[][];
    public static NodoSobre sobre;
    public static int sobresAbiertos = 0;
    public static int numeroEstampa = 0;

    /**
     * Creates new form Usuario
     */
    public Usuario() {
        initComponents();
        cargarInicial();
        buscarEstampa();
        cargarSobreInicial(Integer.parseInt(usuarioActual[0]));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(200, 140));
        setResizable(false);

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButton3.setText("Abrir Sobre Dorado");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Abrir Sobre Normal");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Ver Sobres");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sobres", jPanel3);

        jLabel1.setName("vacio"); // NOI18N

        jLabel2.setName("vacio"); // NOI18N

        jLabel3.setName("vacio"); // NOI18N

        jLabel4.setName("vacio"); // NOI18N

        jLabel5.setName("vacio"); // NOI18N

        jLabel6.setName("vacio"); // NOI18N

        jLabel7.setName("vacio"); // NOI18N

        jLabel8.setName("vacio"); // NOI18N

        jLabel9.setName("vacio"); // NOI18N

        jLabel10.setName("vacio"); // NOI18N

        jLabel11.setName("vacio"); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        jLabel19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(82, 82, 82))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("Album", jPanel1);

        jLabel15.setText("Estampas mas Repetidas");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel16.setText("Equipos con menos Estampas Pegadas");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setEnabled(false);
        jScrollPane2.setViewportView(jTable2);

        jLabel17.setText("Equipos con mas Estampas Pegadas");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setEnabled(false);
        jScrollPane3.setViewportView(jTable3);

        jLabel18.setText("Sobres Abiertos: ");

        jLabel21.setText("0");

        jButton6.setText("Generar Reporte");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Buscar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);

        jLabel22.setText("Ruta:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel15)))
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel16))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(359, 359, 359)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel16)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGap(47, 47, 47)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel18)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        jTabbedPane1.addTab("Reportes", jPanel2);

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(373, 373, 373)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        Inicio.jTextField1.setText("");
        Inicio.jPasswordField1.setText("");
        inicio.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        if (!jLabel20.isEnabled()) {
            jLabel20.setEnabled(true);
        }
        if (equipoActual.getSiguiente() == null) {
            jLabel19.setEnabled(false);
        } else {
            cargarInicial();
            equipoActual = equipoActual.siguiente;
            SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
            String fecha = "";
            try {
                fecha = sdf.format(equipoActual.getEquipo().getDate());
            } catch (Exception e) {
            }
            String texto1 = "Equipo: " + equipoActual.getEquipo().getName();
            String texto2 = "Creacion: " + fecha;
            String texto3 = "Mundiales: " + equipoActual.getEquipo().getMundiales();
            jLabel12.setText(texto1);
            jLabel13.setText(texto2);
            jLabel14.setText(texto3);
            jLabel1.setName("vacio");
            jLabel2.setName("vacio");
            jLabel3.setName("vacio");
            jLabel4.setName("vacio");
            jLabel5.setName("vacio");
            jLabel6.setName("vacio");
            jLabel7.setName("vacio");
            jLabel8.setName("vacio");
            jLabel9.setName("vacio");
            jLabel10.setName("vacio");
            jLabel11.setName("vacio");
            buscarEstampa();
        }
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        if (!jLabel19.isEnabled()) {
            jLabel19.setEnabled(true);
        }
        if (equipoActual.getAnterior() == null) {
            jLabel20.setEnabled(false);
        } else {
            cargarInicial();
            equipoActual = equipoActual.anterior;
            SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
            String fecha = "";
            try {
                fecha = sdf.format(equipoActual.getEquipo().getDate());
            } catch (Exception e) {
            }
            String texto1 = "Equipo: " + equipoActual.getEquipo().getName();
            String texto2 = "Creacion: " + fecha;
            String texto3 = "Mundiales: " + equipoActual.getEquipo().getMundiales();
            jLabel12.setText(texto1);
            jLabel13.setText(texto2);
            jLabel14.setText(texto3);
            jLabel1.setName("vacio");
            jLabel2.setName("vacio");
            jLabel3.setName("vacio");
            jLabel4.setName("vacio");
            jLabel5.setName("vacio");
            jLabel6.setName("vacio");
            jLabel7.setName("vacio");
            jLabel8.setName("vacio");
            jLabel9.setName("vacio");
            jLabel10.setName("vacio");
            jLabel11.setName("vacio");
            buscarEstampa();
        }
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int capacidad;
        Random capacidadRandom = new Random();
        capacidad = 4 + capacidadRandom.nextInt(4);
        int estampas[][] = new int[capacidad][2];
        int contador = 0;
        do {
            contador = 0;
            for (int[] estampa : estampas) {
                int codigo = agregarEstampa();
                estampa[0] = codigo;
                estampa[1] = 0;
            }
            for (int[] estampa : estampas) {
                for (int[] estampa1 : estampas) {
                    if (estampa != estampa1) {
                        if (estampa[0] == estampa1[0]) {
                            contador++;
                        }
                    }
                }
            }
        } while (contador != 0);
        so.agregar(Integer.parseInt(usuarioActual[0]), capacidad, estampas);
        //Agrega a EstampaUsuario
        int contadorx = 0;
        NodoEstampaUsuario nodo = eu.primero.siguiente;
        while (nodo != eu.primero) {
            if (nodo.getEstampaUsuario().getCodUsuario() == Integer.parseInt(usuarioActual[0])) {
                contadorx++;
            }
            nodo = nodo.siguiente;
        }
        if (contadorx != 0) {
            int matriz[][] = new int[contadorx][4];
            int i = 0;
            nodo = eu.primero.siguiente;
            while (nodo != eu.primero) {
                if (nodo.getEstampaUsuario().getCodUsuario() == Integer.parseInt(usuarioActual[0])) {
                    matriz[i][0] = nodo.getEstampaUsuario().getCodUsuario();
                    matriz[i][1] = nodo.getEstampaUsuario().getCodEstampa();
                    matriz[i][2] = nodo.getEstampaUsuario().getPegada();
                    matriz[i][3] = nodo.getEstampaUsuario().getCantidad();
                    i++;
                }
                nodo = nodo.siguiente;
            }
            for (int[] matriz1 : matriz) {
                for (int[] estampa1 : estampas) {
                    if (matriz1[1] == estampa1[0]) {
                        nodo = eu.primero.siguiente;
                        while (nodo != eu.primero) {
                            if (nodo.getEstampaUsuario().getCodUsuario() == Integer.parseInt(usuarioActual[0]) && nodo.getEstampaUsuario().getCodEstampa() == matriz1[1]) {
                                int cantidad = nodo.getEstampaUsuario().getCantidad();
                                nodo.getEstampaUsuario().setCantidad(cantidad + 1);
                                estampa1[1] = -1;
                                break;
                            }
                            nodo = nodo.siguiente;
                        }
                    }
                }
            }
            for (int[] estampa1 : estampas) {
                if (estampa1[1] != -1) {
                    eu.agregar(Integer.parseInt(usuarioActual[0]), estampa1[0], estampa1[1], 1);
                }
            }
        } else {
            for (int[] estampa1 : estampas) {
                eu.agregar(Integer.parseInt(usuarioActual[0]), estampa1[0], estampa1[1], 1);
            }
        }
        VerUltimoSobre sob = new VerUltimoSobre();
        sob.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int capacidad;
        Random capacidadRandom = new Random();
        capacidad = 5 + capacidadRandom.nextInt(5);
        int raras = capacidad / 2;
        int estampas[][] = new int[capacidad][2];
        int contador = 0;
        do {
            contador = 0;
            for (int i = 0; i < raras; i++) {
                int codigo = agregarEstampaRara();
                estampas[i][0] = codigo;
                estampas[i][1] = 0;
            }
            for (int i = raras; i < capacidad; i++) {
                int codigo = agregarEstampaNoRara();
                estampas[i][0] = codigo;
                estampas[i][1] = 0;
            }
            for (int[] estampa : estampas) {
                for (int[] estampa1 : estampas) {
                    if (estampa != estampa1) {
                        if (estampa[0] == estampa1[0]) {
                            contador++;
                        }
                    }
                }
            }
        } while (contador != 0);
        so.agregar(Integer.parseInt(usuarioActual[0]), capacidad, estampas);
        //Agrega a EstampaUsuario
        int contadorx = 0;
        NodoEstampaUsuario nodo = eu.primero.siguiente;
        while (nodo != eu.primero) {
            if (nodo.getEstampaUsuario().getCodUsuario() == Integer.parseInt(usuarioActual[0])) {
                contadorx++;
            }
            nodo = nodo.siguiente;
        }
        int matriz[][];
        if (contadorx != 0) {
            matriz = new int[contadorx][4];
            int i = 0;
            nodo = eu.primero.siguiente;
            while (nodo != eu.primero) {
                if (nodo.getEstampaUsuario().getCodUsuario() == Integer.parseInt(usuarioActual[0])) {
                    matriz[i][0] = nodo.getEstampaUsuario().getCodUsuario();
                    matriz[i][1] = nodo.getEstampaUsuario().getCodEstampa();
                    matriz[i][2] = nodo.getEstampaUsuario().getPegada();
                    matriz[i][3] = nodo.getEstampaUsuario().getCantidad();
                    i++;
                }
                nodo = nodo.siguiente;
            }
            for (int[] matriz1 : matriz) {
                for (int[] estampa1 : estampas) {
                    if (matriz1[1] == estampa1[0]) {
                        nodo = eu.primero.siguiente;
                        while (nodo != eu.primero) {
                            if (nodo.getEstampaUsuario().getCodUsuario() == Integer.parseInt(usuarioActual[0]) && nodo.getEstampaUsuario().getCodEstampa() == matriz1[1]) {
                                int cantidad = nodo.getEstampaUsuario().getCantidad();
                                nodo.getEstampaUsuario().setCantidad(cantidad + 1);
                                estampa1[1] = -1;
                                break;
                            }
                            nodo = nodo.siguiente;
                        }
                    }
                }
            }
            for (int[] estampa1 : estampas) {
                if (estampa1[1] != -1) {
                    eu.agregar(Integer.parseInt(usuarioActual[0]), estampa1[0], estampa1[1], 1);
                }
            }
        } else {
            for (int[] estampa1 : estampas) {
                eu.agregar(Integer.parseInt(usuarioActual[0]), estampa1[0], estampa1[1], 1);
            }
        }
        VerUltimoSobre sob = new VerUltimoSobre();
        sob.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        numeroEstampa = 1;
        VerSobres vs = new VerSobres();
        vs.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        llenarTablaMasRepetidas();
        llenarTablaEquiposMasEstampas();
        llenarTablaEquiposMenosEstampas();
        jLabel21.setText(String.valueOf(sobresAbiertos));
        buscarSobres();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String ruta = this.jTextField1.getText();
        if (!ruta.isEmpty()) {
            try {
                FileOutputStream archivo = new FileOutputStream(ruta + ".pdf");
                Document doc = new Document();
                Font titulo = new Font(Font.FontFamily.HELVETICA, 16, Font.BOLD, BaseColor.BLACK);
                Paragraph parrafo1 = new Paragraph();
                parrafo1.add(new Phrase("Top 5: Estampas mas Repetidas", titulo));
                parrafo1.setAlignment(Element.ALIGN_CENTER);
                parrafo1.add(new Phrase(Chunk.NEWLINE));
                parrafo1.add(new Phrase(Chunk.NEWLINE));
                Paragraph parrafo2 = new Paragraph();
                parrafo2.add(new Phrase(Chunk.NEWLINE));
                parrafo2.add(new Phrase(Chunk.NEWLINE));
                parrafo2.add(new Phrase("Top 5: Equipos con mas estampas Pegadas", titulo));
                parrafo2.setAlignment(Element.ALIGN_CENTER);
                parrafo2.add(new Phrase(Chunk.NEWLINE));
                parrafo2.add(new Phrase(Chunk.NEWLINE));
                Paragraph parrafo3 = new Paragraph();
                parrafo3.add(new Phrase(Chunk.NEWLINE));
                parrafo3.add(new Phrase(Chunk.NEWLINE));
                parrafo3.add(new Phrase("Top 5: Equipos con menos estampas Pegadas", titulo));
                parrafo3.setAlignment(Element.ALIGN_CENTER);
                parrafo3.add(new Phrase(Chunk.NEWLINE));
                parrafo3.add(new Phrase(Chunk.NEWLINE));
                Paragraph parrafo4 = new Paragraph();
                parrafo4.add(new Phrase(Chunk.NEWLINE));
                parrafo4.add(new Phrase(Chunk.NEWLINE));
                parrafo4.add(new Phrase("Sobres: " + sobresAbiertos, titulo));
                parrafo4.setAlignment(Element.ALIGN_CENTER);
                parrafo4.add(new Phrase(Chunk.NEWLINE));
                parrafo4.add(new Phrase(Chunk.NEWLINE));
                try {
                    PdfWriter.getInstance(doc, archivo);
                    doc.open();
                    float[] columnWidth = {40, 40};
                    PdfPTable tabla1 = new PdfPTable(2);
                    PdfPTable tabla2 = new PdfPTable(2);
                    PdfPTable tabla3 = new PdfPTable(2);
                    //TABLA 1
                    tabla1.setTotalWidth(columnWidth);
                    PdfPCell celda11 = new PdfPCell(new Paragraph("Jugador"));
                    PdfPCell celda12 = new PdfPCell(new Paragraph("Estampas"));
                    celda11.setMinimumHeight(30);
                    celda11.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    celda11.setHorizontalAlignment(Element.ALIGN_CENTER);
                    celda12.setMinimumHeight(30);
                    celda12.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    celda12.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tabla1.addCell(celda11);
                    tabla1.addCell(celda12);
                    for (String[] body11 : body1) {
                        for (String body111 : body11) {
                            if (body11[0] != null) {
                                PdfPCell celda = new PdfPCell(new Paragraph(body111));
                                celda.setMinimumHeight(15);
                                celda.setVerticalAlignment(Element.ALIGN_MIDDLE);
                                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                                tabla1.addCell(celda);
                            }
                        }
                    }
                    //Tabla 2
                    tabla2.setTotalWidth(columnWidth);
                    PdfPCell celda21 = new PdfPCell(new Paragraph("Equipo"));
                    PdfPCell celda22 = new PdfPCell(new Paragraph("Estampas"));
                    celda21.setMinimumHeight(30);
                    celda21.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    celda21.setHorizontalAlignment(Element.ALIGN_CENTER);
                    celda22.setMinimumHeight(30);
                    celda22.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    celda22.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tabla2.addCell(celda21);
                    tabla2.addCell(celda22);
                    for (String[] body11 : body2) {
                        for (String body111 : body11) {
                            if (body11[0] != null) {
                                PdfPCell celda = new PdfPCell(new Paragraph(body111));
                                celda.setMinimumHeight(15);
                                celda.setVerticalAlignment(Element.ALIGN_MIDDLE);
                                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                                tabla2.addCell(celda);
                            }
                        }
                    }
                    //TABLA 3
                    tabla3.setTotalWidth(columnWidth);
                    PdfPCell celda31 = new PdfPCell(new Paragraph("Equipo"));
                    PdfPCell celda32 = new PdfPCell(new Paragraph("Estampas"));
                    celda31.setMinimumHeight(30);
                    celda31.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    celda31.setHorizontalAlignment(Element.ALIGN_CENTER);
                    celda32.setMinimumHeight(30);
                    celda32.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    celda32.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tabla3.addCell(celda31);
                    tabla3.addCell(celda32);
                    for (String[] body11 : body3) {
                        for (String body111 : body11) {
                            if (body11[0] != null) {
                                PdfPCell celda = new PdfPCell(new Paragraph(body111));
                                celda.setMinimumHeight(15);
                                celda.setVerticalAlignment(Element.ALIGN_MIDDLE);
                                celda.setHorizontalAlignment(Element.ALIGN_CENTER);
                                tabla3.addCell(celda);
                            }
                        }
                    }
                    doc.add(parrafo1);
                    doc.add(tabla1);
                    doc.add(parrafo2);
                    doc.add(tabla2);
                    doc.add(parrafo3);
                    doc.add(tabla3);
                    doc.add(parrafo4);
                    doc.close();
                    this.jTextField1.setText("");
                    JOptionPane.showMessageDialog(this, "Reporte Creado Correctamente");
                    String rutax = ruta + ".pdf";
                    Process p = Runtime.getRuntime().exec("rundll32 SHELL32.DLL,ShellExec_RunDLL " + rutax);
                } catch (DocumentException | IOException ex) {
                    Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException e) {
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una Ruta Valida", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JFileChooser buscador = new JFileChooser();
        int opcion = buscador.showSaveDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            File f = buscador.getSelectedFile();
            this.jTextField1.setText(f.toString());
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    public void llenarTablaEquiposMasEstampas() {
        int codUsuario = Integer.parseInt(usuarioActual[0]);
        NodoEstampaUsuario us = eu.primero;
        NodoEquipo equipo = eq.primero;
        int contador = 0;
        while (equipo != null) {
            contador++;
            equipo = equipo.siguiente;
        }
        equipo = eq.primero;
        int equipos[][] = new int[contador][2];
        int m = 0;
        while (equipo != null) {
            equipos[m][0] = equipo.getEquipo().getCod();
            equipos[m][1] = 0;
            m++;
            equipo = equipo.siguiente;
        }
        do {
            if (us.getEstampaUsuario().getCodUsuario() == codUsuario) {
                int codEstampa = us.getEstampaUsuario().getCodEstampa();
                int codEquipo = est.buscarEquipo(codEstampa);
                if (us.getEstampaUsuario().getPegada() == 1) {
                    for (int[] equipo1 : equipos) {
                        if (codEquipo == equipo1[0]) {
                            equipo1[1]++;
                        }
                    }
                }
            }
            us = us.siguiente;
        } while (us != eu.primero);
        equipos = ordenar(equipos);
        body2 = new String[5][2];
        int k = 0;
        for (int i = 0; i < equipos.length; i++) {
            if (k < 5) {
                int cod = equipos[i][0];
                String nombre = eq.buscarCodEquipo(cod);
                body2[i][0] = nombre;
                body2[i][1] = String.valueOf(equipos[i][1]);
                k++;
            }
        }
        String head[] = {"Equipo", "Cantidad"};
        DefaultTableModel mod = new DefaultTableModel(body2, head);
        this.jTable2.setModel(mod);
    }

    public void llenarTablaEquiposMenosEstampas() {
        int codUsuario = Integer.parseInt(usuarioActual[0]);
        NodoEstampaUsuario us = eu.primero;
        NodoEquipo equipo = eq.primero;
        int contador = 0;
        while (equipo != null) {
            contador++;
            equipo = equipo.siguiente;
        }
        equipo = eq.primero;
        int equipos[][] = new int[contador][2];
        int m = 0;
        while (equipo != null) {
            equipos[m][0] = equipo.getEquipo().getCod();
            equipos[m][1] = 0;
            m++;
            equipo = equipo.siguiente;
        }
        do {
            if (us.getEstampaUsuario().getCodUsuario() == codUsuario) {
                int codEstampa = us.getEstampaUsuario().getCodEstampa();
                int codEquipo = est.buscarEquipo(codEstampa);
                if (us.getEstampaUsuario().getPegada() == 1) {
                    for (int[] equipo1 : equipos) {
                        if (codEquipo == equipo1[0]) {
                            equipo1[1]++;
                        }
                    }
                }
            }
            us = us.siguiente;
        } while (us != eu.primero);
        equipos = ordenar2(equipos);
        body3 = new String[5][2];
        int k = 0;
        for (int i = 0; i < equipos.length; i++) {
            if (k < 5) {
                int cod = equipos[i][0];
                String nombre = eq.buscarCodEquipo(cod);
                body3[i][0] = nombre;
                body3[i][1] = String.valueOf(equipos[i][1]);
                k++;
            }
        }
        String head[] = {"Equipo", "Cantidad"};
        DefaultTableModel mod = new DefaultTableModel(body3, head);
        this.jTable3.setModel(mod);
    }

    public void llenarTablaMasRepetidas() {
        int codUsuario = Integer.parseInt(usuarioActual[0]);
        NodoEstampaUsuario us = eu.primero;
        int contador = 0;
        do {
            if (us.getEstampaUsuario().getCodUsuario() == codUsuario) {
                contador++;
            }
            us = us.siguiente;
        } while (us != eu.primero);
        us = eu.primero;
        int estampa[][] = new int[contador][2];
        int m = 0;
        do {
            if (us.getEstampaUsuario().getCodUsuario() == codUsuario) {
                estampa[m][0] = us.getEstampaUsuario().getCodEstampa();
                estampa[m][1] = us.getEstampaUsuario().getCantidad();
                m++;
            }
            us = us.siguiente;
        } while (us != eu.primero);
        estampa = ordenar(estampa);
        body1 = new String[10][2];
        int k = 0;
        for (int i = 0; i < contador; i++) {
            if (k < 10) {
                int jugador = est.buscarJugador(estampa[i][0]);
                String nombre = ju.buscarCodJugador(jugador);
                body1[i][0] = nombre;
                body1[i][1] = String.valueOf(estampa[i][1]);
                k++;
            }
        }
        String head[] = {"Jugador", "Cantidad"};
        DefaultTableModel mod = new DefaultTableModel(body1, head);
        this.jTable1.setModel(mod);
    }

    public int agregarEstampaRara() {
        int codigo = 0;
        Random random = new Random();
        int codMayor = codigoMayor();
        boolean existe = false;
        do {
            codigo = random.nextInt(codMayor);
            if (est.buscarCodigo(codigo) && est.buscarRareza(codigo) == 1) {
                existe = true;
            }
        } while (existe == false);
        return codigo;
    }

    public int agregarEstampaNoRara() {
        int codigo = 0;
        Random random = new Random();
        int codMayor = codigoMayor();
        boolean existe = false;
        do {
            codigo = random.nextInt(codMayor);
            if (est.buscarCodigo(codigo) && est.buscarRareza(codigo) == 0) {
                existe = true;
            }
        } while (existe == false);
        return codigo;
    }

    public void buscarSobres() {
        int contador = 0;
        NodoSobre estu = so.primero;
        while (estu != null) {
            if (estu.getSobre().getCodUsuario() == Integer.parseInt(usuarioActual[0])) {
                contador++;
            }
            estu = estu.siguiente;
        }
        sobresAbiertos = contador;
    }

    public int agregarEstampa() {
        int codigo = 0;
        Random random = new Random();
        int codMayor = codigoMayor();
        boolean existe = false;
        do {
            codigo = random.nextInt(codMayor);
            if (est.buscarCodigo(codigo)) {
                existe = true;
            }
        } while (existe == false);
        return codigo;
    }

    public int codigoMayor() {
        NodoEstampa estampa = est.primero;
        int contador = 0;
        while (estampa != null) {
            contador++;
            estampa = estampa.siguiente;
        }
        int matriz[] = new int[contador];
        int m = 0;
        estampa = est.primero;
        while (estampa != null) {
            matriz[m] = estampa.getEstampa().getCod();
            m++;
            estampa = estampa.siguiente;
        }
        for (int i = 0; i < matriz.length - 1; i++) {
            for (int j = 0; j < matriz.length - 1; j++) {
                if (matriz[j] < matriz[j + 1]) {
                    int aux = matriz[j + 1];
                    matriz[j + 1] = matriz[j];
                    matriz[j] = aux;
                }
            }
        }
        int codigo = matriz[0];
        return codigo;
    }

    public void cargarInicial() {
        ImageIcon ImagenJugador = new ImageIcon(getClass().getResource("/imagenes/bloqueado.png"));
        ImageIcon IconoJugador = new ImageIcon(ImagenJugador.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_DEFAULT));
        ImageIcon ImagenSiguiente = new ImageIcon(getClass().getResource("next.png"));
        ImageIcon IconoSiguiente = new ImageIcon(ImagenSiguiente.getImage().getScaledInstance(jLabel19.getWidth(), jLabel19.getHeight(), Image.SCALE_DEFAULT));
        ImageIcon ImagenAnterior = new ImageIcon(getClass().getResource("previous.png"));
        ImageIcon IconoAnterior = new ImageIcon(ImagenAnterior.getImage().getScaledInstance(jLabel20.getWidth(), jLabel20.getHeight(), Image.SCALE_DEFAULT));
        jLabel1.setIcon(IconoJugador);
        jLabel2.setIcon(IconoJugador);
        jLabel3.setIcon(IconoJugador);
        jLabel4.setIcon(IconoJugador);
        jLabel5.setIcon(IconoJugador);
        jLabel6.setIcon(IconoJugador);
        jLabel7.setIcon(IconoJugador);
        jLabel8.setIcon(IconoJugador);
        jLabel9.setIcon(IconoJugador);
        jLabel10.setIcon(IconoJugador);
        jLabel11.setIcon(IconoJugador);
        jLabel19.setIcon(IconoSiguiente);
        jLabel20.setIcon(IconoAnterior);
        SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
        String fecha = "";
        try {
            fecha = sdf.format(equipoActual.getEquipo().getDate());
        } catch (Exception e) {
        }
        String texto1 = "Equipo: " + equipoActual.getEquipo().getName();
        String texto2 = "Creacion: " + fecha;
        String texto3 = "Mundiales: " + equipoActual.getEquipo().getMundiales();
        jLabel12.setText(texto1);
        jLabel13.setText(texto2);
        jLabel14.setText(texto3);
    }

    public void buscarEstampa() {
        int usuario = Integer.parseInt(usuarioActual[0]);
        int equipo = equipoActual.getEquipo().getCod();
        NodoEstampaUsuario estampaUsuario = eu.primero.siguiente;
        while (estampaUsuario != eu.primero) {
            int pegada = estampaUsuario.getEstampaUsuario().getPegada();
            if (pegada == 1) {
                int codUsuario = estampaUsuario.getEstampaUsuario().getCodUsuario();
                int codEstampa = estampaUsuario.getEstampaUsuario().getCodEstampa();
                int codEquipo = est.buscarEquipo(codEstampa);
                if (equipo == codEquipo && usuario == codUsuario) {
                    String ruta = est.buscarRuta(codEstampa);
                    ImageIcon ImagenJugador = new ImageIcon(getClass().getResource("/" + ruta));
                    ImageIcon IconoJugador = new ImageIcon(ImagenJugador.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_DEFAULT));
                    String colocar = String.valueOf(codEstampa);
                    if (jLabel1.getName().equals("vacio")) {
                        jLabel1.setIcon(IconoJugador);
                        jLabel1.setName("lleno");
                    } else if (jLabel2.getName().equals("vacio")) {
                        jLabel2.setIcon(IconoJugador);
                        jLabel2.setName("lleno");
                    } else if (jLabel3.getName().equals("vacio")) {
                        jLabel3.setIcon(IconoJugador);
                        jLabel3.setName("lleno");
                    } else if (jLabel4.getName().equals("vacio")) {
                        jLabel4.setIcon(IconoJugador);
                        jLabel4.setName("lleno");
                    } else if (jLabel5.getName().equals("vacio")) {
                        jLabel5.setIcon(IconoJugador);
                        jLabel5.setName("lleno");
                    } else if (jLabel6.getName().equals("vacio")) {
                        jLabel6.setIcon(IconoJugador);
                        jLabel6.setName("lleno");
                    } else if (jLabel7.getName().equals("vacio")) {
                        jLabel7.setIcon(IconoJugador);
                        jLabel7.setName("lleno");
                    } else if (jLabel8.getName().equals("vacio")) {
                        jLabel8.setIcon(IconoJugador);
                        jLabel8.setName("lleno");
                    } else if (jLabel9.getName().equals("vacio")) {
                        jLabel9.setIcon(IconoJugador);
                        jLabel9.setName("lleno");
                    } else if (jLabel10.getName().equals("vacio")) {
                        jLabel10.setIcon(IconoJugador);
                        jLabel10.setName("lleno");
                    } else if (jLabel11.getName().equals("vacio")) {
                        jLabel11.setIcon(IconoJugador);
                        jLabel11.setName("lleno");
                    }
                }
            }
            estampaUsuario = estampaUsuario.siguiente;
        }
    }

    public int[][] ordenar2(int[][] matriz) {
        for (int i = 0; i < matriz.length - 1; i++) {
            for (int j = 0; j < matriz.length - 1; j++) {
                if (matriz[j][1] > matriz[j + 1][1]) {
                    int[] temp = matriz[j + 1];
                    matriz[j + 1] = matriz[j];
                    matriz[j] = temp;
                }
            }
        }
        return matriz;
    }

    public int[][] ordenar(int[][] matriz) {
        for (int i = 0; i < matriz.length - 1; i++) {
            for (int j = 0; j < matriz.length - 1; j++) {
                if (matriz[j][1] < matriz[j + 1][1]) {
                    int[] temp = matriz[j + 1];
                    matriz[j + 1] = matriz[j];
                    matriz[j] = temp;
                }
            }
        }
        return matriz;
    }

    public void cargarSobreInicial(int codigo) {
        NodoEstampaUsuario nodo = eu.primero.siguiente;
        int contador = 0;
        while (nodo != eu.primero) {
            if (codigo == nodo.getEstampaUsuario().getCodUsuario()) {
                contador++;
            }
            nodo = nodo.siguiente;
        }
        int estampa[][] = new int[contador][2];
        int i = 0;
        nodo = eu.primero.siguiente;
        while (nodo != eu.primero) {
            if (codigo == nodo.getEstampaUsuario().getCodUsuario()) {
                estampa[i][0] = nodo.getEstampaUsuario().getCodEstampa();
                estampa[i][1] = nodo.getEstampaUsuario().getPegada();
                i++;
            }
            nodo = nodo.siguiente;
        }
        so.agregar(codigo, contador, estampa);
        sobre = so.primero;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Usuario().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
