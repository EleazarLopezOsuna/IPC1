package proyecto2_201700893;

import java.awt.Image;
import java.io.*;
import java.text.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import static proyecto2_201700893.Inicio.*;

/**
 *
 * @author Eleazar Jared LÃ³pez Osuna
 */
public class Administrador extends javax.swing.JFrame {

    public String usuarioActual[] = new String[3];
    public String jugadorActual[] = new String[5];
    public String equipoActual[] = new String[3];
    public String estampaActual[] = new String[4];
    public String nombre_archivo = "";
    NodoUsuario usuarios = lu.primero;
    NodoJugador jugadores;
    NodoEquipo equipos;
    NodoEstampa estampas;

    /**
     * Creates new form Administrador
     */
    public Administrador() {
        usuarioActual[0] = usuarios.getUsuario().getName();
        usuarioActual[1] = usuarios.getUsuario().getLastname();
        usuarioActual[2] = usuarios.getUsuario().getPassword();
        initComponents();
        Thread x = new Verificar("Hola");
        cargar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenu2.setText("File");
        jMenuBar2.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("jMenu4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JMundial | Administrador");
        setBounds(new java.awt.Rectangle(0, 0, 400, 315));
        setLocation(new java.awt.Point(400, 140));
        setResizable(false);

        jLabel16.setText("Nombre");

        jLabel17.setText("Fecha de Creacion");

        jLabel18.setText("Mundiales Ganados");

        jTextField10.setEditable(false);

        jTextField11.setEditable(false);

        jTextField12.setEditable(false);

        jLabel19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        jLabel20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(179, 179, 179))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField12)
                            .addComponent(jTextField11)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("Equipos", jPanel2);

        jLabel11.setText("Jugador");

        jLabel12.setText("Equipo");

        jLabel13.setText("Rareza");

        jTextField7.setEditable(false);

        jTextField8.setEditable(false);

        jTextField9.setEditable(false);

        jLabel14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField9)
                            .addComponent(jTextField8)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(75, 75, 75))
        );

        jTabbedPane1.addTab("Estampas", jPanel3);

        jLabel4.setText("Nombre");

        jLabel7.setText("Posicion");

        jLabel8.setText("AÃ±o");

        jTextField4.setEditable(false);

        jTextField5.setEditable(false);

        jTextField6.setEditable(false);

        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        jLabel21.setText("Altura");

        jLabel22.setText("Equipo");

        jTextField13.setEditable(false);

        jTextField14.setEditable(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(127, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(179, 179, 179))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel4))
                            .addComponent(jLabel21)
                            .addComponent(jLabel22))
                        .addGap(58, 58, 58)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField6)
                                .addComponent(jTextField5)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        jTabbedPane1.addTab("Jugadores", jPanel4);

        jLabel1.setText("Nombre");

        jLabel2.setText("Apellido");

        jLabel3.setText("ContraseÃ±a");

        jTextField1.setText(usuarioActual[0]);

        jTextField2.setText(usuarioActual[1]);

        jTextField3.setText(usuarioActual[2]);

        jButton1.setText("Modificar");

        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(96, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)))
                .addGap(58, 58, 58)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("Usuarios", jPanel5);

        jMenu1.setText("Acciones");

        jMenuItem1.setText("Cargar Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Reportes");
        jMenuItem3.setEnabled(false);
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos Mundial", "usr", "eqp", "stm", "jug", "csv");
        JFileChooser buscador = new JFileChooser();
        buscador.setFileFilter(filtro);
        buscador.setCurrentDirectory(new java.io.File("C:\\Users\\USER\\Documents\\NetBeansProjects\\Proyecto2_201700893\\"));
        int opcion = buscador.showOpenDialog(this);
        String ruta_archivo = "";
        nombre_archivo = "";
        if (opcion == JFileChooser.APPROVE_OPTION) {
            nombre_archivo = buscador.getSelectedFile().getName();
            ruta_archivo = buscador.getSelectedFile().toString();
            for (String[] datosCargado : datosCargados) {
                if (datosCargado[0].isEmpty()) {
                    datosCargado[0] = nombre_archivo;
                    break;
                }
            }
        }
        int contador = 0;

        for (String[] datosCargado : datosCargados) {
            if (datosCargado[0].equals(nombre_archivo)) {
                contador++;
            }
        }
        if (nombre_archivo.contains(".usr")) {
            if (contador == 1) {
                try {
                    LeerUsuarios(ruta_archivo);
                } catch (IOException ex) {
                    Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Este Archivo Ya Fue Cargado", "Error", JOptionPane.ERROR_MESSAGE);
                int contadorAux = 0;
                for (String[] datosCargado : datosCargados) {
                    if (datosCargado[0].contains(nombre_archivo)) {
                        contadorAux++;
                    }
                    if (contadorAux == 2) {
                        datosCargado[0] = "";
                    }
                }
            }
        } else if (nombre_archivo.contains(".eqp")) {
            if (contador == 1) {
                try {
                    LeerEquipos(ruta_archivo);
                } catch (IOException | ParseException ex) {
                    Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Este Archivo Ya Fue Cargado", "Error", JOptionPane.ERROR_MESSAGE);
                int contadorAux = 0;
                for (String[] datosCargado : datosCargados) {
                    if (datosCargado[0].contains(nombre_archivo)) {
                        contadorAux++;
                    }
                    if (contadorAux == 2) {
                        datosCargado[0] = "";
                    }
                }
            }
        } else if (nombre_archivo.contains(".jug")) {
            int contadorEqp = 0;
            for (String[] datosCargado : datosCargados) {
                if (datosCargado[0].contains(".eqp")) {
                    contadorEqp++;
                }
            }
            if (contadorEqp != 0) {
                if (contador == 1) {
                    try {
                        LeerJugadores(ruta_archivo);
                    } catch (IOException ex) {
                        Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Este Archivo Ya Fue Cargado", "Error", JOptionPane.ERROR_MESSAGE);
                    int contadorAux = 0;
                    for (String[] datosCargado : datosCargados) {
                        if (datosCargado[0].contains(nombre_archivo)) {
                            contadorAux++;
                        }
                        if (contadorAux == 2) {
                            datosCargado[0] = "";
                        }
                    }
                }
            } else {
                for (String[] datosCargado : datosCargados) {
                    if (datosCargado[0].equals(nombre_archivo)) {
                        datosCargado[0] = "";
                        break;
                    }
                }
                JOptionPane.showMessageDialog(this, "Ingrese Equipos", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (nombre_archivo.contains(".stm")) {
            int contadorEqp = 0;
            int contadorJug = 0;
            for (String[] datosCargado : datosCargados) {
                if (datosCargado[0].contains(".eqp")) {
                    contadorEqp++;
                }
                if (datosCargado[0].contains(".jug")) {
                    contadorJug++;
                }
            }
            if (contadorEqp != 0 && contadorJug != 0) {
                if (contador == 1) {
                    try {
                        LeerEstampas(ruta_archivo);
                    } catch (IOException ex) {
                        Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Este Archivo Ya Fue Cargado", "Error", JOptionPane.ERROR_MESSAGE);
                    int contadorAux = 0;
                    for (String[] datosCargado : datosCargados) {
                        if (datosCargado[0].contains(nombre_archivo)) {
                            contadorAux++;
                        }
                        if (contadorAux == 2) {
                            datosCargado[0] = "";
                        }
                    }
                }
            } else {
                for (String[] datosCargado : datosCargados) {
                    if (datosCargado[0].equals(nombre_archivo)) {
                        datosCargado[0] = "";
                        break;
                    }
                }
                JOptionPane.showMessageDialog(this, "Ingrese Equipos y Jugadores", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (nombre_archivo.contains(".csv")) {
            int contadorEst = 0;
            int contadorUsu = 0;
            for (String[] datosCargado : datosCargados) {
                if (datosCargado[0].contains(".stm")) {
                    contadorEst++;
                }
                if (datosCargado[0].contains(".usr")) {
                    contadorUsu++;
                }
            }
            if (contadorUsu != 0 && contadorEst != 0) {
                if (contador == 1) {
                    try {
                        LeerCSV(ruta_archivo);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Este Archivo Ya Fue Cargado", "Error", JOptionPane.ERROR_MESSAGE);
                    int contadorAux = 0;
                    for (String[] datosCargado : datosCargados) {
                        if (datosCargado[0].contains(nombre_archivo)) {
                            contadorAux++;
                        }
                        if (contadorAux == 2) {
                            datosCargado[0] = "";
                        }
                    }
                }
            } else {
                for (String[] datosCargado : datosCargados) {
                    if (datosCargado[0].equals(nombre_archivo)) {
                        datosCargado[0] = "";
                        break;
                    }
                }
                JOptionPane.showMessageDialog(this, "Ingrese Estampas y Usuarios", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        if (!jLabel6.isEnabled()) {
            jLabel6.setEnabled(true);
        }
        if (usuarios.getSiguiente() != null) {
            usuarios = usuarios.siguiente;
            usuarioActual[0] = usuarios.getUsuario().getName();
            usuarioActual[1] = usuarios.getUsuario().getLastname();
            usuarioActual[2] = usuarios.getUsuario().getPassword();
            this.jTextField1.setText(usuarioActual[0]);
            this.jTextField2.setText(usuarioActual[1]);
            this.jTextField3.setText(usuarioActual[2]);
        } else {
            jLabel5.setEnabled(false);
        }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        if (!jLabel5.isEnabled()) {
            jLabel5.setEnabled(true);
        }
        if (usuarios.getAnterior() != null) {
            usuarios = usuarios.anterior;
            usuarioActual[0] = usuarios.getUsuario().getName();
            usuarioActual[1] = usuarios.getUsuario().getLastname();
            usuarioActual[2] = usuarios.getUsuario().getPassword();
            this.jTextField1.setText(usuarioActual[0]);
            this.jTextField2.setText(usuarioActual[1]);
            this.jTextField3.setText(usuarioActual[2]);
        } else {
            jLabel6.setEnabled(false);
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        if (!jLabel10.isEnabled()) {
            jLabel10.setEnabled(true);
        }
        if (jugadores != null) {
            if (jugadores.getSiguiente() != null) {
                jugadores = jugadores.siguiente;
                jugadorActual[0] = jugadores.getJugador().getNombre();
                jugadorActual[1] = jugadores.getJugador().getPosicion();
                jugadorActual[2] = String.valueOf(jugadores.getJugador().getNacimiento());
                jugadorActual[3] = String.valueOf(jugadores.getJugador().getAltura());
                jugadorActual[4] = eq.buscarCodEquipo(jugadores.getJugador().getCodEquipo());
                this.jTextField6.setText(jugadorActual[0]);
                this.jTextField5.setText(jugadorActual[1]);
                this.jTextField4.setText(jugadorActual[2]);
                this.jTextField13.setText(jugadorActual[3]);
                this.jTextField14.setText(jugadorActual[4]);
            } else {
                jLabel9.setEnabled(false);
            }
        } else {
            jLabel9.setEnabled(false);
        }
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        if (!jLabel9.isEnabled()) {
            jLabel9.setEnabled(true);
        }
        if (jugadores != null) {
            if (jugadores.getAnterior() != null) {
                jugadores = jugadores.anterior;
                jugadorActual[0] = jugadores.getJugador().getNombre();
                jugadorActual[1] = jugadores.getJugador().getPosicion();
                jugadorActual[2] = String.valueOf(jugadores.getJugador().getNacimiento());
                jugadorActual[3] = String.valueOf(jugadores.getJugador().getAltura());
                jugadorActual[4] = eq.buscarCodEquipo(jugadores.getJugador().getCodEquipo());
                this.jTextField6.setText(jugadorActual[0]);
                this.jTextField5.setText(jugadorActual[1]);
                this.jTextField4.setText(jugadorActual[2]);
                this.jTextField13.setText(jugadorActual[3]);
                this.jTextField14.setText(jugadorActual[4]);
            } else {
                jLabel10.setEnabled(false);
            }
        } else {
            jLabel10.setEnabled(false);
        }
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        if (estampas != null) {
            estampaActual[0] = ju.buscarCodJugador(estampas.getEstampa().getCodJugador());
            estampaActual[1] = eq.buscarCodEquipo(estampas.getEstampa().getCodEquipo());
            estampaActual[2] = String.valueOf(estampas.getEstampa().getRareza());
            estampaActual[3] = estampas.getEstampa().getRuta();
            ImageIcon ImagenJugador = new ImageIcon(getClass().getResource("/" + estampaActual[3]));
            ImageIcon IconoJugador = new ImageIcon(ImagenJugador.getImage().getScaledInstance(jLabel23.getWidth(), jLabel23.getHeight(), Image.SCALE_DEFAULT));
            jLabel23.setIcon(IconoJugador);
            this.jTextField9.setText(estampaActual[0]);
            this.jTextField8.setText(estampaActual[1]);
            this.jTextField7.setText(estampaActual[2]);
            estampas = estampas.siguiente;
        } else {

        }
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        if (!jLabel20.isEnabled()) {
            jLabel20.setEnabled(true);
        }
        if (equipos != null) {
            if (equipos.getSiguiente() != null) {
                equipoActual[0] = equipos.getEquipo().getName();
                DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
                String test = df.format(equipos.getEquipo().getDate());
                equipoActual[1] = test;
                equipoActual[2] = String.valueOf(equipos.getEquipo().getMundiales());
                this.jTextField12.setText(equipoActual[0]);
                this.jTextField11.setText(equipoActual[1]);
                this.jTextField10.setText(equipoActual[2]);
                equipos = equipos.siguiente;
            } else {
                jLabel19.setEnabled(false);
            }
        } else {
            jLabel19.setEnabled(false);
        }
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        if (!jLabel19.isEnabled()) {
            jLabel19.setEnabled(true);
        }
        if (equipos != null) {
            if (equipos.getAnterior() != null) {
                equipoActual[0] = equipos.getEquipo().getName();
                DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
                String test = df.format(equipos.getEquipo().getDate());
                equipoActual[1] = test;
                equipoActual[2] = String.valueOf(equipos.getEquipo().getMundiales());
                this.jTextField12.setText(equipoActual[0]);
                this.jTextField11.setText(equipoActual[1]);
                this.jTextField10.setText(equipoActual[2]);
                equipos = equipos.anterior;
            } else {
                jLabel20.setEnabled(false);
            }
        } else {
            jLabel20.setEnabled(false);
        }
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.dispose();
        Inicio.jTextField1.setText("");
        Inicio.jPasswordField1.setText("");
        inicio.setVisible(true);

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Reportes r = new Reportes();
        r.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    public void cargar() {
        ImageIcon next = new ImageIcon(getClass().getResource("next.png"));
        ImageIcon previous = new ImageIcon(getClass().getResource("previous.png"));
        ImageIcon iconoNext = new ImageIcon(next.getImage().getScaledInstance(jLabel5.getWidth(), jLabel5.getHeight(), Image.SCALE_DEFAULT));
        ImageIcon iconoPrevious = new ImageIcon(previous.getImage().getScaledInstance(jLabel6.getWidth(), jLabel5.getHeight(), Image.SCALE_DEFAULT));
        jLabel5.setIcon(iconoNext);
        jLabel6.setIcon(iconoPrevious);
        jLabel9.setIcon(iconoNext);
        jLabel10.setIcon(iconoPrevious);
        jLabel14.setIcon(iconoNext);
        jLabel19.setIcon(iconoNext);
        jLabel20.setIcon(iconoPrevious);
    }

    public void LeerUsuarios(String direccion) throws IOException {
        FileReader lector = new FileReader(direccion);
        BufferedReader br = new BufferedReader(lector);
        String linea;
        int ingresados = 0;
        int error = 0;
        int duplicados = 0;
        while ((linea = br.readLine()) != null) {
            String datos[] = linea.split("\\s*\\|\\s*");
            if (datos.length == 4) {
                if (verificarNumero(datos[0])) {
                    if (lu.buscarCodigo(Integer.parseInt(datos[0]))) {
                        duplicados++;
                    } else {
                        lu.agregar(Integer.parseInt(datos[0]), datos[1], datos[2], datos[3]);
                        ingresados++;
                    }
                } else {
                    error++;
                }
            } else {
                error++;
            }
        }
        usuarios = lu.primero;
        int total = ingresados + duplicados + error;
        for (String[] datosCargado : datosCargados) {
            if (datosCargado[0].contains(nombre_archivo)) {
                datosCargado[1] = String.valueOf(ingresados);
                datosCargado[2] = String.valueOf(error);
                datosCargado[3] = String.valueOf(duplicados);
                datosCargado[4] = String.valueOf(total);
            }
        }
        JOptionPane.showMessageDialog(this, "Archivo Cargado\nDatos Cargados: " + ingresados + "\nDatos con Error: " + error + "\nDatos Diplicados: " + duplicados + "\nTotal: " + total, "Archivo", JOptionPane.INFORMATION_MESSAGE);
        usuario1 = "si";
        lu.imprimir();
    }
    
    public void LeerCSV(String direccion) throws FileNotFoundException, IOException {
        FileReader lector = new FileReader(direccion);
        BufferedReader br = new BufferedReader(lector);
        String linea;
        int ingresados = 0;
        int error = 0;
        int duplicados = 0;
        while ((linea = br.readLine()) != null) {
            String datos[] = linea.split("\\s*,\\s*");
            if (datos.length == 4) {
                if (verificarNumero(datos[0]) && verificarNumero(datos[1]) && verificarNumero(datos[2]) && verificarNumero(datos[3])) {
                    if (lu.buscarCodigo(Integer.parseInt(datos[0])) && est.buscarCodigo(Integer.parseInt(datos[1]))) {
                        if (Integer.parseInt(datos[2]) == 0 || Integer.parseInt(datos[2]) == 1) {
                            if (Integer.parseInt(datos[2]) == 1 && Integer.parseInt(datos[3]) >= 1) {
                                eu.agregar(Integer.parseInt(datos[0]), Integer.parseInt(datos[1]), Integer.parseInt(datos[2]), Integer.parseInt(datos[3]));
                                ingresados++;
                            } else if (Integer.parseInt(datos[2]) == 0 && Integer.parseInt(datos[3]) >= 0) {
                                eu.agregar(Integer.parseInt(datos[0]), Integer.parseInt(datos[1]), Integer.parseInt(datos[2]), Integer.parseInt(datos[3]));
                                ingresados++;
                            }
                        } else {
                            error++;
                        }
                    } else {
                        error++;
                    }
                } else {
                    error++;
                }
            } else {
                error++;
            }
        }
        eu.imprimir();
        int total = ingresados + duplicados + error;
        for (String[] datosCargado : datosCargados) {
            if (datosCargado[0].contains(nombre_archivo)) {
                datosCargado[1] = String.valueOf(ingresados);
                datosCargado[2] = String.valueOf(error);
                datosCargado[3] = String.valueOf(duplicados);
                datosCargado[4] = String.valueOf(total);
            }
        }
        JOptionPane.showMessageDialog(this, "Archivo Cargado\nDatos Cargados: " + ingresados + "\nDatos con Error: " + error + "\nDatos Diplicados: " + duplicados + "\nTotal: " + total, "Archivo", JOptionPane.INFORMATION_MESSAGE);
        csv = "si";
    }

    public void LeerEstampas(String direccion) throws IOException {
        FileReader lector = new FileReader(direccion);
        BufferedReader br = new BufferedReader(lector);
        String linea;
        int ingresados = 0;
        int error = 0;
        int duplicados = 0;
        while ((linea = br.readLine()) != null) {
            String datos[] = linea.split("\\s*\\|\\s*");
            if (datos.length == 5) {
                if (buscarRuta(datos[4])) {
                    if (ju.buscarJugador(Integer.parseInt(datos[1])) && eq.buscarEquipo(Integer.parseInt(datos[2]))) {
                        if (ju.buscarCodEquipo(Integer.parseInt(datos[1])) == Integer.parseInt(datos[2])) {
                            if (est.buscarCodigo(Integer.parseInt(datos[0]))) {
                                duplicados++;
                            } else {
                                if (verificarNumero(datos[0]) && verificarNumero(datos[1]) && verificarNumero(datos[1]) && verificarNumero(datos[3])) {
                                    est.agregar(Integer.parseInt(datos[0]), Integer.parseInt(datos[1]), Integer.parseInt(datos[2]), Integer.parseInt(datos[3]), datos[4]);
                                    ingresados++;
                                }
                            }
                        } else {
                            error++;
                        }
                    } else {
                        error++;
                    }
                } else {
                    error++;
                }
            } else {
                error++;
            }
        }
        estampas = est.primero;
        int total = ingresados + duplicados + error;
        for (String[] datosCargado : datosCargados) {
            if (datosCargado[0].contains(nombre_archivo)) {
                datosCargado[1] = String.valueOf(ingresados);
                datosCargado[2] = String.valueOf(error);
                datosCargado[3] = String.valueOf(duplicados);
                datosCargado[4] = String.valueOf(total);
            }
        }
        JOptionPane.showMessageDialog(this, "Archivo Cargado\nDatos Cargados: " + ingresados + "\nDatos con Error: " + error + "\nDatos Diplicados: " + duplicados + "\nTotal: " + total, "Archivo", JOptionPane.INFORMATION_MESSAGE);
        estampa = "si";
        est.imprimir();
    }

    public boolean buscarRuta(String ruta) {
        File file = new File("src/" + ruta);
        if (file.isFile()) {
            if (file.exists()) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public void LeerEquipos(String direccion) throws IOException, ParseException {
        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(direccion), "cp1252"));
        String linea;
        SimpleDateFormat sdt = new SimpleDateFormat("dd/mm/yyyy");
        int ingresados = 0;
        int error = 0;
        int duplicados = 0;
        while ((linea = br.readLine()) != null) {
            String datos[] = linea.split("\\s*\\|\\s*");
            boolean conversion = false;
            if (datos.length == 4) {
                try {
                    sdt.parse(datos[2]);
                    conversion = true;
                } catch (ParseException e) {
                    conversion = false;
                }
                if (conversion) {
                    if (datos[1].matches("[a-zA-Z0-9Ã±ÃÃ¤ÃÃ«ÃÃ¯ÃÃ¶ÃÃ¼ÃÃ¡Ã©Ã­Ã³ÃºÃ¡Ã©Ã­Ã³ÃºÃÃÃÃÃÃÃÃÃÃÃ¢ÃªÃ®Ã´Ã»Ã Ã¨Ã¬Ã²Ã¹ÃÃÃÃÃ\\s]*")) {
                        if (verificarNumero(datos[0]) && verificarNumero(datos[3])) {
                            if (eq.buscarEquipo(Integer.parseInt(datos[0]))) {
                                duplicados++;
                            } else {
                                eq.agregar(Integer.parseInt(datos[0].trim()), datos[1], sdt.parse(datos[2]), Integer.parseInt(datos[3]));
                                ingresados++;
                            }
                        } else {
                            error++;
                        }
                    } else {
                        error++;
                    }
                } else {
                    error++;
                }
            } else {
                error++;
            }
        }
        eq.imprimir();
        equipos = eq.primero;
        int total = ingresados + duplicados + error;
        for (String[] datosCargado : datosCargados) {
            if (datosCargado[0].contains(nombre_archivo)) {
                datosCargado[1] = String.valueOf(ingresados);
                datosCargado[2] = String.valueOf(error);
                datosCargado[3] = String.valueOf(duplicados);
                datosCargado[4] = String.valueOf(total);
            }
        }
        JOptionPane.showMessageDialog(this, "Archivo Cargado\nDatos Cargados: " + ingresados + "\nDatos con Error: " + error + "\nDatos Diplicados: " + duplicados + "\nTotal: " + total, "Archivo", JOptionPane.INFORMATION_MESSAGE);
        equipo = "si";
    }

    public void LeerJugadores(String direccion) throws IOException {
        FileReader lector = new FileReader(direccion);
        BufferedReader br = new BufferedReader(lector);
        String linea;
        int ingresados = 0;
        int error = 0;
        int duplicados = 0;
        while ((linea = br.readLine()) != null) {
            String datos[] = linea.split("\\s*\\|\\s*");
            if (datos.length == 7) {
                if (verificarNumero(datos[0]) && verificarNumero(datos[3]) && verificarDouble(datos[4]) && verificarDouble(datos[5]) && verificarNumero(datos[6])) {
                    if (eq.buscarEquipo(Integer.parseInt(datos[6]))) {
                        if (ju.buscarJugador(Integer.parseInt(datos[0]))) {
                            duplicados++;
                        } else {
                            DecimalFormat df = new DecimalFormat("#.00");
                            double altura = Double.parseDouble(datos[4]);
                            double peso = Double.parseDouble(datos[5]);
                            ju.agregar(Integer.valueOf(datos[0]), datos[1], datos[2], Integer.parseInt(datos[3]), Double.parseDouble(df.format(altura)), Double.parseDouble(df.format(peso)), Integer.parseInt(datos[6]));
                            ingresados++;
                        }
                    } else {
                        error++;
                    }
                } else {
                    error++;
                }
            } else {
                error++;
            }
        }
        ju.imprimir();
        jugadores = ju.primero;
        int total = ingresados + duplicados + error;
        for (String[] datosCargado : datosCargados) {
            if (datosCargado[0].contains(nombre_archivo)) {
                datosCargado[1] = String.valueOf(ingresados);
                datosCargado[2] = String.valueOf(error);
                datosCargado[3] = String.valueOf(duplicados);
                datosCargado[4] = String.valueOf(total);
            }
        }
        JOptionPane.showMessageDialog(this, "Archivo Cargado\nDatos Cargados: " + ingresados + "\nDatos con Error: " + error + "\nDatos Diplicados: " + duplicados + "\nTotal: " + total, "Archivo", JOptionPane.INFORMATION_MESSAGE);
        jugador = "si";
    }

    public static boolean verificarNumero(String cadena) {
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    public static boolean verificarDouble(String cadena) {
        try {
            Double.parseDouble(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    public class Verificar extends Thread {

        public Verificar(String msg) {
            super(msg);
            this.start();
        }

        @Override
        public void run() {
            boolean cargados = false;
            while (cargados == false) {
                if (usuario1.equals("si") && estampa.equals("si") && jugador.equals("si") && equipo.equals("si") && csv.equals("si")) {
                    Administrador.jMenuItem3.setEnabled(true);
                    cargados = true;
                } else {

                }
                try {
                    sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Administrador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Administrador().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private static javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
